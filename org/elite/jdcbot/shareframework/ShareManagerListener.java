/*
 * ShareManagerListener.java
 *
 * Copyright (C) 2008 AppleGrew
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. 
 */
package org.elite.jdcbot.shareframework;

import org.elite.jdcbot.framework.User;

/**
 * Created on 11-Jun-08<br>
 * Implement this interface if you
 * want to listen for various events
 * generated by ShareManager, and
 * donot forget to call {@link ShareManager#addListener(ShareManagerListener)}
 * to register your listener.
 *
 * @author AppleGrew
 * @since 1.0
 * @version 0.1
 */
public interface ShareManagerListener {
    /**
     * This is called when a file list
     * has been downloaded. If it has been
     * downloaded then it is ready to be browsed.
     * @param u The user whose file list has been downloaded.
     * @param success This is true if file list was successfully
     * downloaded.
     * @param e This is null if <i>success</i> is true.
     */
    void onFilelistDownloadFinished(User u, boolean success, Exception e);

    /**
     * This is called when hashing of file has
     * just started.
     * @param file The absolute path to the file that
     * is being hashed.
     */
    void hashingOfFileStarting(String file);

    /**
     * This is called when hashing of <u>all</u>
     * files is complete. By 'all files' I mean
     * all the files that have been added by a
     * single call to ShareManager's addShare.
     */
    void hashingJobFinished();

    /**
     * This is called when hashing of a file
     * is complete.
     * @param f The absolute path to the file that has been
     * hashed.
     * @param success This is true if hashing is completed successfully.
     * @param e The exception occured if hashing wasn't complete successfully.
     * This is null if no exception occurred.
     */
    void hashingOfFileComplete(String f, boolean success, HashException e);

    /**
     * This is called if a file is not hashed, since it is
     * already in the file list.
     * @param f The path to the file being skipped.
     * @param reason The reason for skipping the file.
     */
    void hashingOfFileSkipped(String f, String reason);

    /**
     * Called when ShareManager wants to notify you
     * of some warning messages.
     * @param msg The message.
     */
    void onMiscMsg(String msg);
}
